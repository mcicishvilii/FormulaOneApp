Index: app/src/main/java/com/example/formulaone/ui/navMenuFragments/settings/SettingsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.formulaone.ui.navMenuFragments.settings\n\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Environment\nimport android.util.Log\nimport android.view.View\nimport android.widget.Toast\nimport androidx.activity.result.ActivityResultLauncher\nimport androidx.core.content.ContextCompat\nimport androidx.fragment.app.viewModels\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.repeatOnLifecycle\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.formulaone.data.model.firebase_test.ForTestFireBase\nimport com.example.formulaone.databinding.FragmentSettingsBinding\nimport com.example.formulaone.ui.adapters.LinksAdatper\nimport com.example.formulaoneapplicationn.common.Resource\nimport com.example.formulaoneapplicationn.common.bases.BaseFragment\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.database.DataSnapshot\nimport com.google.firebase.database.DatabaseError\nimport com.google.firebase.database.DatabaseReference\nimport com.google.firebase.database.ValueEventListener\nimport com.google.firebase.database.ktx.database\nimport com.google.firebase.database.ktx.getValue\nimport com.google.firebase.ktx.Firebase\nimport dagger.hilt.android.AndroidEntryPoint\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.flow.collectLatest\nimport kotlinx.coroutines.launch\nimport java.io.File\nimport java.io.InputStream\n\nconst val TAG = \"misho\"\n\n\n@AndroidEntryPoint\nclass SettingsFragment : BaseFragment<FragmentSettingsBinding>(FragmentSettingsBinding::inflate) {\n    private val linksAdapter: LinksAdatper by lazy { LinksAdatper() }\n    private val vm: SettingsViewModel by viewModels()\n\n    private var read = false\n    private var write = false\n    private lateinit var permissonLauncher: ActivityResultLauncher<Array<String>>\n    private lateinit var database: DatabaseReference\n\n\n    private lateinit var mauth: FirebaseAuth\n\n    override fun viewCreated() {\n\n\n        database = Firebase.database.reference\n        mauth = Firebase.auth\n        val user = mauth.currentUser\n        if (user != null) {\n            binding.tvUsersName.text = \"hello dear \\n${mauth.currentUser?.email.toString()}\"\n        }\n        changeButton()\n\n//        setupRecycler()\n        observe()\n        binding.btnAdd.setOnClickListener {\n            writeNewUser(\"Jimsheri\", \"oto\", \"otarbakh@gmail.com\")\n\n        }\n        binding.btnGet.setOnClickListener {\n\n\n            database.child(\"momxmarebelebi\").child(\"Jimsheri\").child(\"username\").get()\n                .addOnSuccessListener {\n\n                    binding.tvUserInfo.text = it.value.toString()\n                }.addOnFailureListener {\n                Log.e(\"firebase\", \"Error getting data\", it)\n            }\n        }\n\n\n    }\n\n    fun writeNewUser(userId: String, name: String, email: String) {\n\n        val key = database.child(\"momxmarebelebi\").push().key\n\n        if (key == null){\n            Toast.makeText(requireContext(), \"S2\", Toast.LENGTH_SHORT).show()\n            return\n        }\n        val forTestFirebase = ForTestFireBase(name,email)\n        val postforTestFirebase = forTestFirebase.toMap()\n\n        val childUpdate = hashMapOf<String,Any>(\n            \"/momxmarebelebi/$key\" to postforTestFirebase,\n            \"/momxmarebelebi/$userId/$key\" to postforTestFirebase\n        )\n        database.updateChildren(childUpdate)\n\n\n    }\n\n    override fun listeners() {\n\n        insertIntoDatabase()\n\n        getFromDataBase()\n\n\n        logOut()\n//        navigateLogIn()\n        gotoLink()\n\n        viewLifecycleOwner.lifecycleScope.launch(Dispatchers.IO) {\n            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {\n                binding.tvLogin.setOnClickListener {\n//                    readText()\n                }\n            }\n        }\n    }\n\n    private fun insertIntoDatabase() {\n    }\n\n    private fun getFromDataBase() {\n\n\n    }\n\n    private fun gotoLink() {\n        linksAdapter.setOnItemClickListener { article, _ ->\n            val uri: Uri = Uri.parse(article.link) // missing 'http://' will cause crashed\n            val intent = Intent(Intent.ACTION_VIEW, uri)\n            startActivity(intent)\n        }\n    }\n\n    private fun navigateLogIn() {\n        binding.tvLogin.setOnClickListener {\n            findNavController().navigate(SettingsFragmentDirections.actionSettingsFragmentToSignInFragment())\n        }\n    }\n\n    private fun changeButton() {\n        val user = mauth.currentUser\n        if (user == null) {\n            binding.logoutbutton.visibility = View.GONE\n            binding.tvLogin.visibility = View.VISIBLE\n        } else {\n            binding.logoutbutton.visibility = View.VISIBLE\n            binding.tvLogin.visibility = View.GONE\n        }\n    }\n\n    private fun logOut() {\n        binding.logoutbutton.setOnClickListener {\n            mauth.signOut()\n            findNavController().navigate(SettingsFragmentDirections.actionSettingsFragmentToWelcomeFragment())\n            checkLoggedInState()\n        }\n    }\n\n    private fun checkLoggedInState() {\n        val user = mauth.currentUser\n        if (user == null) {\n            binding.tvUsersName.text = \"\"\n        } else {\n            binding.tvUsersName.text = \"hello  dear\" + \"  \" + mauth.currentUser?.email.toString()\n            Toast.makeText(requireContext(), \"logged in\", Toast.LENGTH_SHORT)\n                .show()\n        }\n    }\n\n    private fun observe() {\n//        setupRecycler()\n        vm.getTeams()\n        viewLifecycleOwner.lifecycleScope.launch {\n            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {\n                vm.state.collectLatest {\n                    when (it) {\n                        is Resource.Error -> {\n\n                        }\n                        is Resource.Loading -> {\n                            Log.d(\"cicishvili\", it.loading.toString())\n                        }\n                        is Resource.Success -> {\n                            linksAdapter.submitList(it.data)\n                            Log.d(\"cicishvili\", it.data.size.toString())\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n//    private fun setupRecycler() {\n//        binding.rvLinks.apply {\n//            adapter = linksAdapter\n//            layoutManager =\n//                LinearLayoutManager(\n//                    requireContext(),\n//                    LinearLayoutManager.VERTICAL,\n//                    false\n//                )\n//        }\n//    }\n\n\n    private fun updateOrRequestPermissions() {\n        val hasRead = ContextCompat.checkSelfPermission(\n            requireContext(),\n            android.Manifest.permission.READ_EXTERNAL_STORAGE\n        ) == PackageManager.PERMISSION_GRANTED\n\n        val hasWrite = ContextCompat.checkSelfPermission(\n            requireContext(),\n            android.Manifest.permission.WRITE_EXTERNAL_STORAGE\n        ) == PackageManager.PERMISSION_GRANTED\n\n        val minSdk29 = Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q\n        read = hasRead\n        write = hasWrite || minSdk29\n\n        val permissionsToRequest = mutableListOf<String>()\n\n        if (!write) {\n            permissionsToRequest.add(android.Manifest.permission.WRITE_EXTERNAL_STORAGE)\n        }\n        if (!read) {\n            permissionsToRequest.add(android.Manifest.permission.READ_EXTERNAL_STORAGE)\n        }\n        if (permissionsToRequest.isNotEmpty()) {\n            permissonLauncher.launch(permissionsToRequest.toTypedArray())\n        }\n    }\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/formulaone/ui/navMenuFragments/settings/SettingsFragment.kt b/app/src/main/java/com/example/formulaone/ui/navMenuFragments/settings/SettingsFragment.kt
--- a/app/src/main/java/com/example/formulaone/ui/navMenuFragments/settings/SettingsFragment.kt	(revision 7abc70577d80acef04400fe903a0a35ea80dff3d)
+++ b/app/src/main/java/com/example/formulaone/ui/navMenuFragments/settings/SettingsFragment.kt	(date 1670871108071)
@@ -51,6 +51,7 @@
     private lateinit var database: DatabaseReference
 
 
+
     private lateinit var mauth: FirebaseAuth
 
     override fun viewCreated() {
